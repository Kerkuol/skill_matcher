import streamlit as st
import pandas as pd
from io import BytesIO
from resume_parser import parse_resume
from extract_skills import extract_skills
from compare_skills import compare_skills
from recommend_courses import recommend_courses
import plotly.graph_objects as go
import time
import requests
from datetime import datetime, timedelta
from typing import Dict
import logging
import plotly.express as px
import numpy as np
from profiles import profiles  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ profiles.py
import re
import json
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Skill Matcher",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üß†"
)

# –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.cache_data.clear()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
COLOR_SCHEME = ['#1f77b4', '#2c5282', '#2b6cb0', '#3182ce']

# –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
st.markdown("""
    <style>
    /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ */
    .main {
        padding: 0rem 1rem;
    }
    .stProgress > div > div > div > div {
        background-color: var(--primary-color);
    }
    .stDataFrame {
        font-size: 13px;
    }
    div[data-testid="stExpander"] {
        border: none;
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    }
    .stPlotlyChart {
        padding: 0 !important;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π/—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    [data-testid="stAppViewContainer"] {
        background-color: var(--background-color);
        color: var(--text-color);
    }
    
    .metric-card {
        background-color: var(--card-background-color);
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: var(--primary-color);
    }
    
    .metric-label {
        color: var(--text-color);
        font-size: 0.875rem;
    }
    
    h1, h2, h3 {
        color: var(--header-color);
        margin-bottom: 0.5rem !important;
    }
    
    .feature-card {
        background-color: var(--card-background-color);
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
    }
    
    .feature-title {
        color: var(--header-color);
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .feature-description {
        color: var(--text-color);
        font-size: 0.9rem;
    }
    
    /* –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã */
    [data-testid="stAppViewContainer"].light {
        --background-color: white;
        --text-color: #4a5568;
        --header-color: #2c5282;
        --primary-color: #3182ce;
        --border-color: #e2e8f0;
        --card-background-color: white;
    }
    
    /* –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    [data-testid="stAppViewContainer"].dark {
        --background-color: #1a1a1a;
        --text-color: #e2e8f0;
        --header-color: #63b3ed;
        --primary-color: #4299e1;
        --border-color: #2d3748;
        --card-background-color: #2d3748;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
    .skills-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
    }
    
    .skills-table th {
        background-color: var(--card-background-color);
        padding: 0.5rem;
        text-align: left;
        color: var(--text-color);
        border-bottom: 2px solid var(--border-color);
    }
    
    .skills-table td {
        padding: 0.5rem;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-color);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .js-plotly-plot {
        background-color: var(--background-color) !important;
    }
    
    .js-plotly-plot .plotly .main-svg {
        background-color: var(--background-color) !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ */
    .stAlert {
        background-color: var(--card-background-color) !important;
        border-color: var(--border-color) !important;
    }

    .stAlert .markdown-text-container {
        color: var(--text-color) !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
    .stButton > button {
        background-color: var(--primary-color) !important;
        color: white !important;
        border: none !important;
    }

    .stButton > button:hover {
        background-color: var(--header-color) !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ–≤ –∏ –∏–Ω–ø—É—Ç–æ–≤ */
    .stSelectbox, .stTextInput {
        background-color: var(--card-background-color) !important;
        color: var(--text-color) !important;
    }

    .stSelectbox > div > div > div {
        color: var(--text-color) !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [data-baseweb="tab-list"] {
        background-color: var(--card-background-color) !important;
    }

    .stTabs [data-baseweb="tab"] {
        color: var(--text-color) !important;
    }

    .stTabs [aria-selected="true"] {
        color: var(--primary-color) !important;
    }
    </style>
    
    <script>
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        const theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        document.querySelector('[data-testid="stAppViewContainer"]').classList.add(theme);
    </script>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'theme' not in st.session_state:
    st.session_state.theme = 'light'

# –ò—Å—Ç–æ—Ä–∏—è
if "history" not in st.session_state:
    st.session_state.history = []

with st.sidebar:
    st.header("üïò –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞")
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å"):
        st.session_state.history = []
    for item in st.session_state.history[::-1]:
        st.write(f"**{item['file']}** ‚Äî {item['profile']} ‚Äî {item['score']}%")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
if "analytics_data" not in st.session_state:
    st.session_state.analytics_data = {
        "total_resumes": 0,
        "average_score": 0,
        "category_scores": {},
        "skill_gaps": {},
        "timestamps": [],
        "scores_history": [],
        "skills_frequency": {},
        "experience_levels": {
            "junior": 0,
            "middle": 0,
            "senior": 0
        }
    }

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def init_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π."""
    from transformers import pipeline, AutoModelForTokenClassification, AutoTokenizer
    from sentence_transformers import SentenceTransformer
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    ner_model = pipeline("ner", model="dslim/bert-base-NER")
    embedding_model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
    
    return ner_model, embedding_model

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ner_model, embedding_model = init_models()

def normalize_skill_name(skill_name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è."""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    normalized = skill_name.lower().strip()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    normalized = re.sub(r'[^\w\s-]', '', normalized)
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    replacements = {
        'javascript': 'js',
        'typescript': 'ts',
        'node.js': 'nodejs',
        'node js': 'nodejs',
        'react.js': 'react',
        'react js': 'react',
        'vue.js': 'vue',
        'vue js': 'vue',
        'postgresql': 'postgres',
        'microsoft sql server': 'mssql',
        'machine learning': 'ml',
        'artificial intelligence': 'ai',
        'amazon web services': 'aws',
        'google cloud platform': 'gcp',
        'microsoft azure': 'azure',
        'deep learning': 'dl',
        'natural language processing': 'nlp',
        'computer vision': 'cv'
    }
    
    for old, new in replacements.items():
        if normalized == old:
            return new
    
    return normalized

def process_resume_text(text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤."""
    try:
        extracted_skills = extract_skills(text)
        if not extracted_skills:
            return {
                "total_percentage": 0,
                "categories_analysis": {},
                "extracted_skills": [],
                "confirmed_skills_count": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = profiles[selected_profile]
        if not profile:
            return {
                "total_percentage": 0,
                "categories_analysis": {},
                "extracted_skills": [],
                "confirmed_skills_count": 0
            }
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
        skill_dict = {}
        for skill in extracted_skills:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
            skill_name = normalize_skill_name(skill["skill"])
            skill_dict[skill_name] = skill
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            variations = [
                skill_name.replace(" ", "-"),
                skill_name.replace("-", " "),
                skill_name.replace(" ", ""),
                skill_name.replace("-", "")
            ]
            for var in variations:
                skill_dict[var] = skill
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        confirmed_skills = set()
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≤—ã–∫–æ–≤
        level_weights = {
            "expert": 2.0,
            "intermediate": 1.5,
            "beginner": 1.0
        }
        
        # –í–µ—Å–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_weights = {
            "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è": 1.5,
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": 1.5,
            "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": 2.0,
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏": 1.8,
            "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": 1.3,
            "Data Science": 2.0,
            "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö": 1.5,
            "Web Development": 1.5,
            "DevOps": 1.5,
            "Soft Skills": 1.2
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_analysis = {}
        total_weighted_score = 0
        total_possible_score = 0
        
        for category_name, category_skills in profile["categories"].items():
            category_score = 0
            category_matches = []
            category_partials = []
            category_missing = []
            category_weight = category_weights.get(category_name, 1.0)
            max_category_score = 0
            
            for skill_name, skill_data in category_skills.items():
                required_level = skill_data["level"]
                skill_found = False
                max_skill_score = 2.0 * category_weight
                max_category_score += max_skill_score
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                normalized_skill_name = normalize_skill_name(skill_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤—ã–∫–∞ –∏–ª–∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                search_terms = [normalized_skill_name] + [
                    normalize_skill_name(k) for k in skill_data.get("keywords", [])
                ]
                
                for term in search_terms:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
                    variations = [
                        term,
                        term.replace(" ", "-"),
                        term.replace("-", " "),
                        term.replace(" ", ""),
                        term.replace("-", "")
                    ]
                    
                    for var in variations:
                        if var in skill_dict:
                            skill_found = True
                            extracted_skill = skill_dict[var]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–≤—ã–∫–µ
                            if extracted_skill["confidence"] < 0.7:
                                continue
                                
                            candidate_level = extracted_skill["level"]
                            confirmed_skills.add(extracted_skill["skill"].lower())
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
                            candidate_level_value = {"expert": 3, "intermediate": 2, "beginner": 1}[candidate_level]
                            required_level_value = required_level
                            
                            if candidate_level_value >= required_level_value:
                                base_score = level_weights.get(candidate_level, 1.0)
                                level_bonus = max(0, (candidate_level_value - required_level_value) * 0.5)
                                score = (base_score + level_bonus) * category_weight
                                
                                category_score += score
                                category_matches.append({
                                    "skill": skill_name,
                                    "level": candidate_level,
                                    "description": skill_data["description"]
                                })
                            else:
                                ratio = candidate_level_value / required_level_value
                                base_score = level_weights.get(candidate_level, 1.0)
                                score = base_score * ratio * 0.8 * category_weight
                                
                                category_score += score
                                category_partials.append({
                                    "skill": skill_name,
                                    "current_level": candidate_level,
                                    "required_level": required_level,
                                    "description": skill_data["description"]
                                })
                            break
                    if skill_found:
                        break
                
                if not skill_found:
                    category_missing.append({
                        "skill": skill_name,
                        "required_level": required_level,
                        "description": skill_data["description"]
                    })
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –ø–æ–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_matches and len(category_matches) >= len(category_skills) * 0.7:
                coverage_bonus = 0.2 * category_score
                category_score += coverage_bonus
            
            total_weighted_score += category_score
            total_possible_score += max_category_score
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_percentage = round((category_score * 100) / max_category_score) if max_category_score > 0 else 0
            
            categories_analysis[category_name] = {
                "score": category_score,
                "weight": category_weight,
                "percentage": category_percentage,
                "matches": category_matches,
                "partials": category_partials,
                "missing": category_missing
            }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        total_percentage = round((total_weighted_score * 100) / total_possible_score) if total_possible_score > 0 else 0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if any(len(data.get('matches', [])) >= 3 and data.get('percentage', 0) >= 70 
               for category, data in categories_analysis.items()):
            total_percentage = round(min(100, total_percentage * 1.2))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        if confirmed_skills and total_percentage == 0:
            min_percentage = min(30, len(confirmed_skills) * 2)
            total_percentage = max(total_percentage, min_percentage)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"Profile: {selected_profile}")
        logging.info(f"Total percentage: {total_percentage}")
        logging.info(f"Confirmed skills: {len(confirmed_skills)}")
        logging.info(f"Categories analysis: {json.dumps(categories_analysis, indent=2)}")
        
        return {
            "total_percentage": total_percentage,
            "categories_analysis": categories_analysis,
            "extracted_skills": extracted_skills,
            "confirmed_skills_count": len(confirmed_skills)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {str(e)}")
        logging.error(f"Traceback: {traceback.format_exc()}")
        return {
            "total_percentage": 0,
            "categories_analysis": {},
            "extracted_skills": [],
            "confirmed_skills_count": 0
        }

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤
@st.cache_data
def get_course_recommendations(skill: str, level: str):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤."""
    return recommend_courses([skill], level)

# –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
col1, col2 = st.columns([3, 1])
with col1:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    profile_names = list(profiles.keys())
    selected_profile = st.selectbox("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", profile_names)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    profile_data = profiles[selected_profile]

with col2:
    if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"):
        st.session_state.show_matrix_editor = True

# –†–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
if "show_matrix_editor" not in st.session_state:
    st.session_state.show_matrix_editor = False

if st.session_state.show_matrix_editor:
    st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if "edited_profile" not in st.session_state:
        st.session_state.edited_profile = profiles[selected_profile].copy()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        matrix_data = []
        for category_name, category_data in st.session_state.edited_profile["categories"].items():
            for skill_name, skill_data in category_data.items():
                matrix_data.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
                    "–ù–∞–≤—ã–∫": skill_name,
                    "–£—Ä–æ–≤–µ–Ω—å": skill_data["level"],
                    "–û–ø–∏—Å–∞–Ω–∏–µ": skill_data.get("description", ""),
                    "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": ", ".join(skill_data.get("keywords", []))
                })
        st.session_state.matrix_data = matrix_data if matrix_data else [{"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "", "–ù–∞–≤—ã–∫": "", "–£—Ä–æ–≤–µ–Ω—å": 1, "–û–ø–∏—Å–∞–Ω–∏–µ": "", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": ""}]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_description = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
        value=st.session_state.edited_profile.get("description", ""),
        height=100
    )
    
    st.markdown("#### –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
        st.session_state.matrix_data.append({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "",
            "–ù–∞–≤—ã–∫": "",
            "–£—Ä–æ–≤–µ–Ω—å": 1,
            "–û–ø–∏—Å–∞–Ω–∏–µ": "",
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": ""
        })
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É
    edited_df = pd.DataFrame(st.session_state.matrix_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    edited_df["–£—Ä–æ–≤–µ–Ω—å"] = edited_df["–£—Ä–æ–≤–µ–Ω—å"].map({1: "–ë–∞–∑–æ–≤—ã–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"})
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    edited_data = st.data_editor(
        edited_df,
        column_config={
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": st.column_config.TextColumn(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤",
                required=True
            ),
            "–ù–∞–≤—ã–∫": st.column_config.TextColumn(
                "–ù–∞–≤—ã–∫",
                help="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞",
                required=True
            ),
            "–£—Ä–æ–≤–µ–Ω—å": st.column_config.SelectboxColumn(
                "–£—Ä–æ–≤–µ–Ω—å",
                help="–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è",
                options=["–ë–∞–∑–æ–≤—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
                required=True
            ),
            "–û–ø–∏—Å–∞–Ω–∏–µ": st.column_config.TextColumn(
                "–û–ø–∏—Å–∞–Ω–∏–µ",
                help="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞",
                width="large"
            ),
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": st.column_config.TextColumn(
                "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                help="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                width="large"
            )
        },
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True
    )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–æ–≤—ã–µ
            level_map = {"–ë–∞–∑–æ–≤—ã–π": 1, "–°—Ä–µ–¥–Ω–∏–π": 2, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 3}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            new_categories = {}
            for _, row in edited_data.iterrows():
                if row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] and row["–ù–∞–≤—ã–∫"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                    if category not in new_categories:
                        new_categories[category] = {}
                    
                    new_categories[category][row["–ù–∞–≤—ã–∫"]] = {
                        "level": level_map[row["–£—Ä–æ–≤–µ–Ω—å"]],
                        "description": row["–û–ø–∏—Å–∞–Ω–∏–µ"],
                        "keywords": [k.strip() for k in row["–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"].split(",") if k.strip()]
                    }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profiles[selected_profile] = {
                "description": profile_description,
                "categories": new_categories
            }
            st.session_state.show_matrix_editor = False
            del st.session_state.matrix_data
            del st.session_state.edited_profile
            st.success("‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            st.rerun()
    
    with col2:
        if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            st.session_state.show_matrix_editor = False
            if "matrix_data" in st.session_state:
                del st.session_state.matrix_data
            if "edited_profile" in st.session_state:
                del st.session_state.edited_profile
            st.rerun()

st.title("üß† AI Skill Matcher ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—é")

uploaded_files = st.file_uploader(
    "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—é–º–µ",
    type=["pdf", "docx", "txt"],
    accept_multiple_files=True
)

def determine_experience_level(total_percentage: float, categories_analysis: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏—Ö —É—Ä–æ–≤–Ω–µ–π."""
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
    expert_skills = 0
    intermediate_skills = 0
    total_skills = 0
    
    # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_weights = {
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è": 1.2,
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": 1.2,
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": 1.5,
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏": 1.3,
        "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": 1.0
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_levels = {}
    for category, data in categories_analysis.items():
        category_expert = 0
        category_intermediate = 0
        category_total = 0
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        for skill in data.get('matches', []):
            category_total += 1
            if skill.get('level') == 'expert':
                category_expert += 1
            elif skill.get('level') == 'intermediate':
                category_intermediate += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_total > 0:
            weight = category_weights.get(category, 1.0)
            expert_skills += category_expert * weight
            intermediate_skills += category_intermediate * weight
            total_skills += category_total * weight
            
            category_levels[category] = {
                'expert_ratio': category_expert / category_total if category_total > 0 else 0,
                'intermediate_ratio': category_intermediate / category_total if category_total > 0 else 0
            }
    
    if total_skills == 0:
        return "junior"
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
    expert_ratio = expert_skills / total_skills if total_skills > 0 else 0
    intermediate_ratio = intermediate_skills / total_skills if total_skills > 0 else 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    key_categories = ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏"]
    key_categories_expert = any(
        category in category_levels and 
        category_levels[category]['expert_ratio'] >= 0.3
        for category in key_categories
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞ –≤ –≤–∞–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    has_ml_experience = any(
        skill.get('level') in ['expert', 'intermediate']
        for skill in categories_analysis.get("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", {}).get('matches', [])
    )
    
    has_infrastructure = any(
        skill.get('level') in ['expert', 'intermediate']
        for skill in categories_analysis.get("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", {}).get('matches', [])
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    if (expert_ratio >= 0.3 and total_percentage >= 45) or (
        expert_ratio >= 0.2 and 
        intermediate_ratio >= 0.3 and 
        total_percentage >= 45 and 
        key_categories_expert and
        has_ml_experience and
        has_infrastructure
    ):
        return "senior"
    elif (expert_ratio >= 0.15 or intermediate_ratio >= 0.3) and total_percentage >= 35:
        return "middle"
    else:
        return "junior"

def update_analytics(categories_analysis: dict, total_percentage: float, extracted_skills: list):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        analytics = st.session_state.analytics_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑—é–º–µ
        if total_percentage > 0:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
            analytics["total_resumes"] += 1
            analytics["timestamps"].append(datetime.now())
            analytics["scores_history"].append(total_percentage)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä
            analytics["average_score"] = sum(analytics["scores_history"]) / len(analytics["scores_history"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category, data in categories_analysis.items():
                if category not in analytics["category_scores"]:
                    analytics["category_scores"][category] = []
                analytics["category_scores"][category].append(data["percentage"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–≤—ã–∫–∞—Ö
            for category, data in categories_analysis.items():
                for skill in data["missing"]:
                    skill_name = skill["skill"]
                    if skill_name not in analytics["skill_gaps"]:
                        analytics["skill_gaps"][skill_name] = 0
                    analytics["skill_gaps"][skill_name] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞–≤—ã–∫–æ–≤
            for skill in extracted_skills:
                skill_name = skill["skill"]
                if skill_name not in analytics["skills_frequency"]:
                    analytics["skills_frequency"][skill_name] = 0
                analytics["skills_frequency"][skill_name] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –æ–ø—ã—Ç–∞
            experience_level = determine_experience_level(total_percentage, categories_analysis)
            analytics["experience_levels"][experience_level] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            st.session_state.analytics_data = analytics
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")

def display_single_resume_analysis(results: dict, profile_name: str, show_title: bool = True, resume_id: str = None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ
        profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        show_title: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        resume_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ
    """
    total_percentage = results['total_percentage']
    categories_analysis = results['categories_analysis']
    
    if show_title:
        st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    row1_col1, row1_col2, row1_col3 = st.columns(3)
    row2_col1, row2_col2, row2_col3 = st.columns(3)
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫
    with row1_col1:
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{total_percentage}%</div>
                <div class="metric-label">–û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</div>
            </div>
        """, unsafe_allow_html=True)
    
    with row1_col2:
        level = determine_experience_level(total_percentage, categories_analysis)
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{level.capitalize()}</div>
                <div class="metric-label">–£—Ä–æ–≤–µ–Ω—å</div>
            </div>
        """, unsafe_allow_html=True)
    
    with row1_col3:
        categories_count = len([c for c in categories_analysis.values() if c['percentage'] > 0])
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{categories_count}</div>
                <div class="metric-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–≤—ã–∫–æ–≤</div>
            </div>
        """, unsafe_allow_html=True)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫
    with row2_col1:
        confirmed_skills = sum(len(data['matches']) for data in categories_analysis.values())
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{confirmed_skills}</div>
                <div class="metric-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤</div>
            </div>
        """, unsafe_allow_html=True)
    
    with row2_col2:
        missing_skills = sum(len(data['missing']) for data in categories_analysis.values())
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{missing_skills}</div>
                <div class="metric-label">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤</div>
            </div>
        """, unsafe_allow_html=True)
    
    with row2_col3:
        partial_skills = sum(len(data['partials']) for data in categories_analysis.values())
        st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{partial_skills}</div>
                <div class="metric-label">–ù–∞–≤—ã–∫–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è</div>
            </div>
        """, unsafe_allow_html=True)
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tabs = st.tabs(["üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üéØ –ù–∞–≤—ã–∫–∏", "üìà –¢—Ä–µ–Ω–¥—ã", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])
    
    with tabs[0]:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            categories = []
            scores = []
            for category, data in categories_analysis.items():
                if data['percentage'] > 0:
                    categories.append(category)
                    scores.append(data['percentage'])
            
            if categories:
                fig = go.Figure(data=[go.Pie(
                    labels=categories,
                    values=scores,
                    hole=.3,
                    marker=dict(colors=COLOR_SCHEME)
                )])
                fig.update_layout(
                    margin=dict(l=20, r=20, t=30, b=20),
                    height=300,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"
                )
                st.plotly_chart(fig, use_container_width=True, key=f"pie_chart_{resume_id}")
        
        with col2:
            # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            if categories:
                fig = go.Figure()
                fig.add_trace(go.Scatterpolar(
                    r=scores,
                    theta=categories,
                    fill='toself',
                    line=dict(color=COLOR_SCHEME[0])
                ))
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 100]
                        )
                    ),
                    margin=dict(l=20, r=20, t=30, b=20),
                    height=300,
                    title="–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
                )
                st.plotly_chart(fig, use_container_width=True, key=f"radar_chart_{resume_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
        skills_distribution = []
        for category, data in categories_analysis.items():
            skills_distribution.extend([
                {"category": category, "status": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", "count": len(data['matches'])},
                {"category": category, "status": "–¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", "count": len(data['partials'])},
                {"category": category, "status": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "count": len(data['missing'])}
            ])
        
        df_distribution = pd.DataFrame(skills_distribution)
        if not df_distribution.empty:
            fig = px.bar(
                df_distribution,
                x="category",
                y="count",
                color="status",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                color_discrete_sequence=COLOR_SCHEME,
                barmode="group"
            )
            fig.update_layout(
                xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤",
                height=400,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            st.plotly_chart(fig, use_container_width=True, key=f"distribution_chart_{resume_id}")
    
    with tabs[1]:
        skill_tabs = st.tabs(["‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", "‚ö† –¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", "√ó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"])
        
        for tab_idx, (tab, (status, icon)) in enumerate(zip(skill_tabs, [("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", "‚úì"), ("–¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", "‚ö†"), ("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "√ó")])):
            with tab:
                skills_data = []
                for category, analysis in categories_analysis.items():
                    if status == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã":
                        skills = analysis['matches']
                    elif status == "–¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è":
                        skills = analysis['partials']
                    else:
                        skills = analysis['missing']
                    
                    for skill in skills:
                        skills_data.append({
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                            "–ù–∞–≤—ã–∫": skill['skill'],
                            "–£—Ä–æ–≤–µ–Ω—å": skill.get('level', 'N/A'),
                            "–û–ø–∏—Å–∞–Ω–∏–µ": skill['description']
                        })
                
                if skills_data:
                    df = pd.DataFrame(skills_data)
                    
                    # –§–∏–ª—å—Ç—Ä—ã
                    col1, col2 = st.columns(2)
                    with col1:
                        filter_key = f"categories_filter_{status}_{resume_id}_{tab_idx}"
                        selected_categories = st.multiselect(
                            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                            options=sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].unique()),
                            default=sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].unique()),
                            key=filter_key
                        )
                    
                    filtered_df = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(selected_categories)]
                    st.table(filtered_df)
                else:
                    st.info(f"–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{status}'")
    
    with tabs[2]:
        st.write("#### –¢—Ä–µ–Ω–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        trends_data = []
        for category, data in categories_analysis.items():
            total_skills = len(data['matches']) + len(data['partials']) + len(data['missing'])
            if total_skills > 0:
                confirmed_percent = len(data['matches']) * 100 / total_skills
                partial_percent = len(data['partials']) * 100 / total_skills
                missing_percent = len(data['missing']) * 100 / total_skills
                
                trends_data.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö": confirmed_percent,
                    "–ü—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—è": partial_percent,
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö": missing_percent,
                    "–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤": total_skills
                })
        
        if trends_data:
            df_trends = pd.DataFrame(trends_data)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤
            fig_trends = go.Figure()
            for col in ["–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö", "–ü—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—è", "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö"]:
                fig_trends.add_trace(go.Bar(
                    name=col,
                    x=df_trends["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                    y=df_trends[col],
                    text=df_trends[col].round(1).astype(str) + "%",
                    textposition="auto",
                ))
            
            fig_trends.update_layout(
                barmode='stack',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)",
                xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç",
                height=400,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            st.plotly_chart(fig_trends, use_container_width=True, key=f"trends_chart_{resume_id}")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            st.write("#### –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            st.table(df_trends.round(1))
    
    with tabs[3]:
        st.write("#### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        strengths = []
        improvements = []
        
        for category, data in categories_analysis.items():
            category_percentage = data['percentage']
            
            if category_percentage >= 70:
                strengths.append({
                    "category": category,
                    "percentage": category_percentage,
                    "confirmed_skills": len(data['matches'])
                })
            elif category_percentage < 50:
                improvements.append({
                    "category": category,
                    "percentage": category_percentage,
                    "missing_skills": len(data['missing']),
                    "partial_skills": len(data['partials'])
                })
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("##### üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
            if strengths:
                for strength in sorted(strengths, key=lambda x: x['percentage'], reverse=True):
                    st.markdown(f"""
                        <div class="metric-card">
                            <div style="font-size: 1.1rem; font-weight: bold; color: var(--header-color);">
                                {strength['category']}
                            </div>
                            <div style="color: #48bb78; font-size: 1.5rem; margin: 0.5rem 0;">
                                {strength['percentage']}%
                            </div>
                            <div class="metric-label">
                                –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {strength['confirmed_skills']}
                            </div>
                        </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
        
        with col2:
            st.write("##### üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è")
            if improvements:
                for improvement in sorted(improvements, key=lambda x: x['percentage']):
                    st.markdown(f"""
                        <div class="metric-card">
                            <div style="font-size: 1.1rem; font-weight: bold; color: var(--header-color);">
                                {improvement['category']}
                            </div>
                            <div style="color: #e53e3e; font-size: 1.5rem; margin: 0.5rem 0;">
                                {improvement['percentage']}%
                            </div>
                            <div class="metric-label">
                                –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç—å: {improvement['partial_skills']} –Ω–∞–≤—ã–∫–æ–≤<br>
                                –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {improvement['missing_skills']} –Ω–∞–≤—ã–∫–æ–≤
                            </div>
                        </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        skills_to_improve = []
        for category, data in categories_analysis.items():
            for skill in data['partials']:
                skills_to_improve.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                    "–ù–∞–≤—ã–∫": skill['skill'],
                    "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å": skill['current_level'],
                    "–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å": skill['required_level']
                })
        
        if skills_to_improve:
            df_improve = pd.DataFrame(skills_to_improve)
            st.dataframe(df_improve)
            
            # –í—ã–±–æ—Ä –Ω–∞–≤—ã–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            selected_skill = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é",
                options=df_improve["–ù–∞–≤—ã–∫"].unique(),
                key=f"skill_selector_{resume_id}"
            )
            
            if selected_skill:
                skill_data = df_improve[df_improve["–ù–∞–≤—ã–∫"] == selected_skill].iloc[0]
                courses = get_course_recommendations(selected_skill, skill_data["–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å"])
                
                if courses:
                    st.write(f"##### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–∞ '{selected_skill}':")
                    for course in courses:
                        st.markdown(f"""
                            <div class="metric-card">
                                <div style="font-size: 1.1rem; font-weight: bold; color: var(--header-color);">
                                    {course['title']}
                                </div>
                                <div class="metric-label">
                                    {course['description']}<br>
                                    –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['platform']}<br>
                                    –£—Ä–æ–≤–µ–Ω—å: {course['level']}<br>
                                    {'üîó ' + course['url'] if 'url' in course else ''}
                                </div>
                            </div>
                        """, unsafe_allow_html=True)
                else:
                    st.info("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞")

def display_comparative_analysis(resumes_data: list, profile_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∑—é–º–µ."""
    st.write("### –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_data = []
    for resume in resumes_data:
        if "results" in resume:
            categories_analysis = resume["results"]["categories_analysis"]
            confirmed_skills = sum(len(data['matches']) for data in categories_analysis.values())
            missing_skills = sum(len(data['missing']) for data in categories_analysis.values())
            partial_skills = sum(len(data['partials']) for data in categories_analysis.values())
            
            comparison_data.append({
                "–ö–∞–Ω–¥–∏–¥–∞—Ç": resume["file_name"],
                "–û–±—â–∏–π –±–∞–ª–ª": resume["results"]["total_percentage"],
                "–£—Ä–æ–≤–µ–Ω—å": determine_experience_level(
                    resume["results"]["total_percentage"], 
                    categories_analysis
                ).capitalize(),
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤": confirmed_skills,
                "–¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è": partial_skills,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç": missing_skills
            })
    
    if comparison_data:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
        comparison_data.sort(key=lambda x: x["–û–±—â–∏–π –±–∞–ª–ª"], reverse=True)
        df = pd.DataFrame(comparison_data)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        compare_tabs = st.tabs(["üìä –û–±—â–∏–π –æ–±–∑–æ—Ä", "üìà –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"])
        
        with compare_tabs[0]:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.table(df)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –±–∞–ª–ª–æ–≤
            fig = go.Figure(data=[
                go.Bar(
                    x=[d["–ö–∞–Ω–¥–∏–¥–∞—Ç"] for d in comparison_data],
                    y=[d["–û–±—â–∏–π –±–∞–ª–ª"] for d in comparison_data],
                    marker_color=COLOR_SCHEME[0],
                    text=[f"{d['–û–±—â–∏–π –±–∞–ª–ª']}%" for d in comparison_data],
                    textposition="auto",
                )
            ])
            fig.update_layout(
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É",
                xaxis_title="",
                yaxis_title="–û–±—â–∏–π –±–∞–ª–ª, %",
                height=400,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            st.plotly_chart(fig, use_container_width=True, key="overall_comparison_chart")
        
        with compare_tabs[1]:
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_data = []
            for resume in resumes_data:
                if "results" in resume:
                    for category, analysis in resume["results"]["categories_analysis"].items():
                        categories_data.append({
                            "–ö–∞–Ω–¥–∏–¥–∞—Ç": resume["file_name"],
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                            "–ü—Ä–æ—Ü–µ–Ω—Ç": analysis["percentage"]
                        })
            
            if categories_data:
                df_categories = pd.DataFrame(categories_data)
                fig = px.bar(
                    df_categories,
                    x="–ö–∞–Ω–¥–∏–¥–∞—Ç",
                    y="–ü—Ä–æ—Ü–µ–Ω—Ç",
                    color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞–≤—ã–∫–æ–≤",
                    color_discrete_sequence=COLOR_SCHEME,
                    barmode="group"
                )
                fig.update_layout(
                    xaxis_title="",
                    yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
                    height=400,
                    margin=dict(l=20, r=20, t=40, b=20),
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    )
                )
                st.plotly_chart(fig, use_container_width=True, key="categories_comparison_chart")
            
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤
            skills_analysis_data = []
            for resume in resumes_data:
                if "results" in resume:
                    for category, analysis in resume["results"]["categories_analysis"].items():
                        confirmed = len(analysis['matches'])
                        partial = len(analysis['partials'])
                        missing = len(analysis['missing'])
                        total = confirmed + partial + missing
                        if total > 0:
                            skills_analysis_data.append({
                                "–ö–∞–Ω–¥–∏–¥–∞—Ç": resume["file_name"],
                                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ": confirmed,
                                "–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è": partial,
                                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç": missing,
                                "–í—Å–µ–≥–æ": total,
                                "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": round(confirmed * 100 / total, 1),
                                "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è": round(partial * 100 / total, 1),
                                "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è": round(missing * 100 / total, 1)
                            })
            
            if skills_analysis_data:
                df_analysis = pd.DataFrame(skills_analysis_data)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                viz_tabs = st.tabs(["üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤", "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
                
                with viz_tabs[0]:
                    st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
                    fig_distribution = go.Figure()
                    
                    for candidate in df_analysis["–ö–∞–Ω–¥–∏–¥–∞—Ç"].unique():
                        df_candidate = df_analysis[df_analysis["–ö–∞–Ω–¥–∏–¥–∞—Ç"] == candidate]
                        
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
                        fig_distribution.add_trace(go.Bar(
                            name=f"{candidate} (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)",
                            x=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            y=df_candidate["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"],
                            marker_color="#63b3ed",
                            text=df_candidate["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"],
                            textposition="inside",
                            hovertemplate="<b>%{x}</b><br>" +
                                        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: %{y}<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                        
                        # –ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
                        fig_distribution.add_trace(go.Bar(
                            name=f"{candidate} (–†–∞–∑–≤–∏—Ç–∏–µ)",
                            x=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            y=df_candidate["–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è"],
                            marker_color="#90cdf4",
                            text=df_candidate["–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è"],
                            textposition="inside",
                            hovertemplate="<b>%{x}</b><br>" +
                                        "–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è: %{y}<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                        
                        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
                        fig_distribution.add_trace(go.Bar(
                            name=f"{candidate} (–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
                            x=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            y=df_candidate["–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                            marker_color="#2c5282",
                            text=df_candidate["–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                            textposition="inside",
                            hovertemplate="<b>%{x}</b><br>" +
                                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: %{y}<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                    
                    fig_distribution.update_layout(
                        barmode='group',
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤",
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        font={'color': '#e2e8f0'},
                        showlegend=True,
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        ),
                        height=500
                    )
                    
                    fig_distribution.update_xaxes(showgrid=False, color='#e2e8f0')
                    fig_distribution.update_yaxes(showgrid=True, gridcolor='rgba(128,128,128,0.2)', color='#e2e8f0')
                    
                    st.plotly_chart(fig_distribution, use_container_width=True, key="skills_distribution_chart")
                
                with viz_tabs[1]:
                    st.write("#### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–∂–¥—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                    fig_radar = go.Figure()
                    
                    for candidate in df_analysis["–ö–∞–Ω–¥–∏–¥–∞—Ç"].unique():
                        df_candidate = df_analysis[df_analysis["–ö–∞–Ω–¥–∏–¥–∞—Ç"] == candidate]
                        
                        fig_radar.add_trace(go.Scatterpolar(
                            r=df_candidate["–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"],
                            theta=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            name=f"{candidate} (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)",
                            fill='toself',
                            line=dict(width=2),
                            hovertemplate="<b>%{theta}</b><br>" +
                                        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: %{r}%<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                        
                        fig_radar.add_trace(go.Scatterpolar(
                            r=df_candidate["–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è"],
                            theta=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            name=f"{candidate} (–†–∞–∑–≤–∏—Ç–∏–µ)",
                            fill='toself',
                            line=dict(width=2, dash='dash'),
                            hovertemplate="<b>%{theta}</b><br>" +
                                        "–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è: %{r}%<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                        
                        fig_radar.add_trace(go.Scatterpolar(
                            r=df_candidate["–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è"],
                            theta=df_candidate["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                            name=f"{candidate} (–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
                            fill='toself',
                            line=dict(width=2, dash='dot'),
                            hovertemplate="<b>%{theta}</b><br>" +
                                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: %{r}%<br>" +
                                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate}<extra></extra>"
                        ))
                    
                    fig_radar.update_layout(
                        polar=dict(
                            radialaxis=dict(
                                visible=True,
                                range=[0, 100],
                                color='#e2e8f0',
                                gridcolor='rgba(128,128,128,0.2)'
                            ),
                            angularaxis=dict(
                                color='#e2e8f0'
                            ),
                            bgcolor='rgba(0,0,0,0)'
                        ),
                        showlegend=True,
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        ),
                        paper_bgcolor='rgba(0,0,0,0)',
                        font={'color': '#e2e8f0'},
                        height=500
                    )
                    
                    st.plotly_chart(fig_radar, use_container_width=True, key="skills_radar_chart")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                    st.write("#### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤")
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                    heatmap_data = df_analysis.pivot(
                        index="–ö–∞–Ω–¥–∏–¥–∞—Ç",
                        columns="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        values="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                    fig_heatmap = go.Figure(data=go.Heatmap(
                        z=heatmap_data.values,
                        x=heatmap_data.columns,
                        y=heatmap_data.index,
                        colorscale='YlOrRd',
                        text=heatmap_data.values.round(1),
                        texttemplate="%{text}%",
                        textfont={"size": 10},
                        hoverongaps=False,
                        colorbar=dict(
                            title="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                            ticksuffix="%"
                        )
                    ))
                    
                    fig_heatmap.update_layout(
                        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        yaxis_title="–ö–∞–Ω–¥–∏–¥–∞—Ç—ã",
                        height=500,
                        margin=dict(l=20, r=20, t=40, b=20),
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        font={'color': '#e2e8f0'}
                    )
                    
                    st.plotly_chart(fig_heatmap, use_container_width=True, key="skills_heatmap")
                
                with viz_tabs[2]:
                    st.write("#### –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤")
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                    detailed_df = df_analysis.copy()
                    detailed_df["–ü—Ä–æ–≥—Ä–µ—Å—Å"] = detailed_df.apply(
                        lambda row: f"{row['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ']}/{row['–í—Å–µ–≥–æ']} ({row['–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è']}%)",
                        axis=1
                    )
                    
                    # –§–∏–ª—å—Ç—Ä—ã
                    col1, col2 = st.columns(2)
                    with col1:
                        selected_candidates = st.multiselect(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                            options=detailed_df["–ö–∞–Ω–¥–∏–¥–∞—Ç"].unique(),
                            default=detailed_df["–ö–∞–Ω–¥–∏–¥–∞—Ç"].unique()
                        )
                    
                    with col2:
                        selected_categories = st.multiselect(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            options=detailed_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].unique(),
                            default=detailed_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].unique()
                        )
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    filtered_df = detailed_df[
                        (detailed_df["–ö–∞–Ω–¥–∏–¥–∞—Ç"].isin(selected_candidates)) &
                        (detailed_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].isin(selected_categories))
                    ]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    st.dataframe(
                        filtered_df[[
                            "–ö–∞–Ω–¥–∏–¥–∞—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü—Ä–æ–≥—Ä–µ—Å—Å",
                            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        ]].style.background_gradient(
                            subset=["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                            cmap="YlOrRd"
                        ),
                        hide_index=True,
                        height=400
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    st.write("#### –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    summary_stats = pd.DataFrame([{
                        "–ú–µ—Ç—Ä–∏–∫–∞": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{filtered_df['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].mean():.1f}"
                    }, {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": str(filtered_df['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].max())
                    }, {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{filtered_df['–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'].mean():.1f}%"
                    }])
                    
                    st.dataframe(summary_stats, hide_index=True)
        
        with compare_tabs[2]:
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            for idx, resume in enumerate(resumes_data):
                if "results" in resume:
                    st.write(f"#### {resume['file_name']}")
                    # –ü–µ—Ä–µ–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
                    display_single_resume_analysis(
                        resume["results"],
                        profile_name,
                        show_title=False,
                        resume_id=f"{idx}_{resume['file_name']}"
                    )
                    st.markdown("---")

def display_welcome_screen():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        
        with st.container():
            st.subheader("üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")
            st.write("""
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ–º–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é.
                –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.
            """)
        
        with st.container():
            st.subheader("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            st.write("""
                ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                ‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            """)
    
    with col2:
        with st.container():
            st.subheader("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            st.write("""
                ‚úì –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—é
                ‚úì –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
                ‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
                ‚úì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                ‚úì –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
            """)
        
        with st.container():
            st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏")
            st.write("""
                ‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
                ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            """)

def display_loader(message: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
    with st.container():
        st.markdown(f"""
            <div style="display: flex; justify-content: center; align-items: center; padding: 2rem;">
                <div style="color: #2c5282; font-weight: 500;">{message}</div>
            </div>
        """, unsafe_allow_html=True)

def display_progress(current: int, total: int, message: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏."""
    progress = current / total
    with st.container():
        st.markdown(f"""
            <div style="text-align: center; margin: 1rem 0;">
                <div style="color: #2c5282; font-weight: 500; margin-bottom: 0.5rem;">{message}</div>
                <div style="color: #2c5282; font-weight: 500;">{int(progress * 100)}%</div>
            </div>
        """, unsafe_allow_html=True)
        st.progress(progress)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if uploaded_files:
    total_files = len(uploaded_files)
    processed_resumes = []
    
    for i, f in enumerate(uploaded_files, 1):
        text = parse_resume(f)

        if text.startswith("["):
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {f.name}: {text}")
            continue

        results = process_resume_text(text)
        
        if results:
            processed_resumes.append({
                "file_name": f.name,
                "results": results
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.history.append({
                "file": f.name,
                "profile": selected_profile,
                "score": results["total_percentage"]
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            update_analytics(
                results["categories_analysis"],
                results["total_percentage"],
                results["extracted_skills"]
            )
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    if processed_resumes:
        if len(processed_resumes) == 1:
            display_single_resume_analysis(processed_resumes[0]["results"], selected_profile)
        elif len(processed_resumes) > 1:
            display_comparative_analysis(processed_resumes, selected_profile)
else:
    display_welcome_screen() 